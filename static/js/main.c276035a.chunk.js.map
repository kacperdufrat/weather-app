{"version":3,"sources":["components/Weather/Weather.js","components/CitySelection/CitySelection.js","components/WeatherGeolocation/WeatherGeolocation.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Weather","city","country","useState","data","setData","error","setError","useEffect","fetch","then","response","ok","json","Error","catch","err","console","message","className","name","sys","Date","toLocaleDateString","src","weather","icon","alt","main","temp","temp_min","temp_max","CitySelection","setCity","setCountry","cityValue","setCityValue","countryValue","setCountryValue","onSubmit","e","preventDefault","type","onChange","target","value","placeholder","lng","lat","App","weatherGeolocation","footer","setLng","setLat","navigator","geolocation","getCurrentPosition","position","longitude","coords","toFixed","latitude","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c276035a.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\";\r\nimport \"./Weather.scss\";\r\nimport { FaLongArrowAltDown, FaLongArrowAltUp, FaThermometerThreeQuarters } from 'react-icons/fa';\r\nimport 'weather-icons/css/weather-icons.css';\r\n\r\nconst Weather = ({city, country}) => {\r\n    const [data, setData] = useState(false);\r\n    const [error, setError] = useState(false);\r\n\r\n    useEffect(() => {\r\n      setData(false);\r\n      setError(false);\r\n        fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&units=metric&APPID=198cd1c8a70a5ce116f0faa861a83524`)\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            } else {\r\n                throw new Error(\"Błąd sieci!\");\r\n            }\r\n        })\r\n        .then(data => {\r\n            setData(data);\r\n        })\r\n        .catch(err => {\r\n            setError(true);\r\n            console.error(\"Pojawiły się błędy - \" + err.message);   \r\n        })\r\n    }, [city, country])\r\n\r\n    if (error === true) {\r\n        return <h1 className=\"loading\">City not found</h1>\r\n    }\r\n\r\n    if (data === false) {\r\n        return <h1 className=\"loading\">Loading...</h1>\r\n    }\r\n\r\n    \r\n    return (\r\n        <div className=\"weather-container\">\r\n            <h2 className=\"weather-city\">{data.name}, {data.sys.country}</h2>\r\n            <div className=\"weather-date\">{new Date().toLocaleDateString()}</div>\r\n            <div className=\"weather-icon\">\r\n                <img src={`https://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`} alt=\"weather-icon\"/>\r\n            </div>\r\n            <div className=\"weather-temp\">\r\n                <FaThermometerThreeQuarters className=\"temperature\"/>{data.main.temp}°C\r\n            </div>\r\n            <div className=\"weather-temp__minmax\">\r\n                <div className=\"weather-temp__min\">\r\n                    <FaLongArrowAltDown className=\"arrow-down\"/>{data.main.temp_min}°C\r\n                </div>\r\n                <div className=\"weather-temp__max\">{data.main.temp_max}°C\r\n                    <FaLongArrowAltUp className=\"arrow-up\"/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather;","import React, {useState} from \"react\";\r\nimport \"./CitySelection.scss\";\r\n\r\nconst CitySelection = ({setCity, setCountry}) => {\r\n    const [cityValue, setCityValue] = useState(\"\");\r\n    const [countryValue, setCountryValue] = useState(\"\");\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        \r\n        setCity(cityValue);\r\n        setCountry(countryValue);\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                onChange={e => setCityValue(e.target.value)}\r\n                placeholder='City'/>\r\n            <input\r\n                type=\"text\"\r\n                onChange={e => setCountryValue(e.target.value)}\r\n                placeholder='Country'/>\r\n            <button>Check it</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default CitySelection;","import React, {useState, useEffect} from \"react\";\r\nimport \"./WeatherGeolocation.scss\";\r\nimport {FaLongArrowAltDown, FaLongArrowAltUp, FaThermometerThreeQuarters} from 'react-icons/fa';\r\nimport 'weather-icons/css/weather-icons.css';\r\n\r\nconst Weather = ({lng, lat}) => {\r\n    const [data, setData] = useState(false);\r\n    const [error, setError] = useState(false);\r\n\r\n    useEffect(() => {\r\n      setData(false);\r\n      setError(false);\r\n        fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lng}&units=metric&APPID=198cd1c8a70a5ce116f0faa861a83524`)\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            } else {\r\n                throw new Error(\"Błąd sieci!\");\r\n            }\r\n        })\r\n        .then(data => {\r\n            setData(data);\r\n        })\r\n        .catch(err => {\r\n            setError(true);\r\n            console.error(\"Pojawiły się błędy - \" + err.message);   \r\n        })\r\n    }, [lat, lng])\r\n\r\n    if (error === true) {\r\n        return <h1 className=\"loading\">City not found</h1>\r\n    }\r\n\r\n    if (data === false) {\r\n        return <h1 className=\"loading\">Loading...</h1>\r\n    }\r\n\r\n    \r\n    return (\r\n        <div className=\"weather-container\">\r\n            <h2 className=\"weather-city\">{data.name}, {data.sys.country}</h2>\r\n            <div className=\"weather-date\">{new Date().toLocaleDateString()}</div>\r\n            <div className=\"weather-icon\">\r\n                <img src={`https://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`} alt=\"weather-icon\"/>\r\n            </div>\r\n            <div className=\"weather-temp\">\r\n                <FaThermometerThreeQuarters className=\"temperature\"/>{data.main.temp}°C\r\n            </div>\r\n            <div className=\"weather-temp__minmax\">\r\n                <div className=\"weather-temp__min\">\r\n                    <FaLongArrowAltDown className=\"arrow-down\"/>{data.main.temp_min}°C\r\n                </div>\r\n                <div className=\"weather-temp__max\">{data.main.temp_max}°C\r\n                    <FaLongArrowAltUp className=\"arrow-up\"/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather;","import React, {useState} from 'react';\r\nimport './App.scss';\r\nimport Weather from '../Weather/Weather';\r\nimport CitySelection from '../CitySelection/CitySelection';\r\nimport {FaLinkedin, FaGithubSquare} from 'react-icons/fa';\r\nimport WeatherGeolocation from \"../WeatherGeolocation/WeatherGeolocation\";\r\n\r\nconst App = () => {\r\n  const [city, setCity] = useState(\"\");\r\n  const [country, setCountry] = useState(\"\");\r\n  const [lng, setLng] = useState(\"\");\r\n  const [lat, setLat] = useState(\"\");\r\n\r\n  function displayLocationInfo(position) {\r\n    let longitude = position.coords.longitude.toFixed(3);\r\n    let latitude = position.coords.latitude.toFixed(3);\r\n  \r\n    setLng(longitude);\r\n    setLat(latitude);\r\n  }\r\n\r\n  if (navigator.geolocation) {\r\n    navigator.geolocation.getCurrentPosition(displayLocationInfo);\r\n  }\r\n\r\n  let weatherGeolocation;\r\n\r\n  if (lng && lat) {\r\n    weatherGeolocation = <WeatherGeolocation lng={lng} lat={lat}/>\r\n  } \r\n  \r\n  let footer;\r\n\r\n  if (city === \"\" && country === \"\" && lat === \"\" && lng === \"\") {\r\n    footer = (\r\n      <footer>\r\n        <div>made by Kacper Dufrat</div> \r\n        <a href=\"https://www.linkedin.com/in/kacper-dufrat/\"  target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <FaLinkedin className=\"li-icon\"/>\r\n        </a> \r\n        <a href=\"https://github.com/kacperdufrat\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <FaGithubSquare className=\"git-icon\"/>\r\n        </a>\r\n      </footer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <header>\r\n        <h1>Weather app</h1>\r\n      </header>\r\n      <main>\r\n        <CitySelection setCity={setCity} setCountry={setCountry} />\r\n        <div className=\"api-container\">\r\n          {(city !== \"\") && (country !== \"\") && <Weather city={city} country={country}/>}\r\n          {(city === \"\") && (country === \"\") && weatherGeolocation}\r\n        </div>\r\n      </main>\r\n      {footer}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}